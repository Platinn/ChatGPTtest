{"ast":null,"code":"var _jsxFileName = \"/Users/plvenard/Code/chatgpt-test2/chatgpt2/chatgpttest2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { sendMessage, sendMessageWithContext } from './ChatGPTAPI';\nimport TokenInput from './TokenInput';\nimport styles from './Chat.module.css';\nimport darkStyles from './ChatDark.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [userToken, setUserToken] = useState(sessionStorage.getItem('userToken'));\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [useContext, setUseContext] = useState(true); // useContext is now a state variable\n  const [darkMode, setDarkMode] = useState(false);\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    //setMessages([...messages, { role: 'user', content: input }]);\n    //setInput('');\n\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    if (useContext) {\n      const response = await sendMessageWithContext(updatedMessages, userToken);\n      setMessages([...updatedMessages, {\n        role: 'assistant',\n        content: response\n      }]);\n    } else {\n      //no memory of previous chats\n      const response = await sendMessage(input, userToken);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: response\n      }]);\n    }\n  };\n\n  //if the person isn't logged in with it's userToken\n  if (!userToken) {\n    return /*#__PURE__*/_jsxDEV(TokenInput, {\n      setUserToken: setUserToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.chatContainer} ${darkMode ? darkStyles.chatContainer : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.darkModeToggle,\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Dark mode\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.chatWindow} ${darkMode ? darkStyles.chatWindow : ''}`,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${message.role === 'user' ? styles.userMessage : styles.gptMessage} ${darkMode ? message.role === 'user' ? darkStyles.userMessage : darkStyles.gptMessage : ''}`,\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `${styles.inputForm} ${darkMode ? darkStyles.inputForm : ''}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\",\n        style: darkMode ? {\n          backgroundColor: darkStyles.inputForm.inputBg,\n          color: darkStyles.inputForm.input\n        } : {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Hs17bbcGEBhQQRWSFHRHJoFlnk4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","sendMessage","sendMessageWithContext","TokenInput","styles","darkStyles","jsxDEV","_jsxDEV","App","_s","userToken","setUserToken","sessionStorage","getItem","messages","setMessages","input","setInput","useContext","setUseContext","darkMode","setDarkMode","toggleDarkMode","handleSubmit","e","preventDefault","trim","newMessage","role","content","updatedMessages","response","prevMessages","fileName","_jsxFileName","lineNumber","columnNumber","className","chatContainer","children","darkModeToggle","type","onChange","chatWindow","map","message","index","messageContainer","userMessage","gptMessage","text","inputForm","onSubmit","value","target","placeholder","style","backgroundColor","inputBg","color","_c","$RefreshReg$"],"sources":["/Users/plvenard/Code/chatgpt-test2/chatgpt2/chatgpttest2/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { sendMessage, sendMessageWithContext } from './ChatGPTAPI';\nimport TokenInput from './TokenInput';\nimport styles from './Chat.module.css';\nimport darkStyles from './ChatDark.module.css';\n\nconst App = () => {\n  const [userToken, setUserToken] = useState(sessionStorage.getItem('userToken'));\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [useContext, setUseContext] = useState(true); // useContext is now a state variable\n  const [darkMode, setDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    //setMessages([...messages, { role: 'user', content: input }]);\n    //setInput('');\n\n    const newMessage = { role: 'user', content: input };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput('');\n\n    if (useContext) {\n\n      const response = await sendMessageWithContext(updatedMessages, userToken);\n      setMessages([...updatedMessages, { role: 'assistant', content: response }]);\n\n    } else {\n      //no memory of previous chats\n      const response = await sendMessage(input, userToken);\n      setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: response }]);\n    }\n  };\n\n  //if the person isn't logged in with it's userToken\n  if (!userToken) {\n    return <TokenInput setUserToken={setUserToken} />;\n  }\n\n  return (\n    <div className={`${styles.chatContainer} ${darkMode ? darkStyles.chatContainer : ''}`}>\n      <div className={styles.darkModeToggle}>\n        <label>\n          Dark mode\n          <input type=\"checkbox\" onChange={toggleDarkMode} />\n        </label>\n      </div>\n      <div className={`${styles.chatWindow} ${darkMode ? darkStyles.chatWindow : ''}`}>\n        {messages.map((message, index) => (\n          <div key={index} className={styles.messageContainer}>\n            <div\n              className={`${message.role === 'user' ? styles.userMessage : styles.gptMessage} ${\n                darkMode ? (message.role === 'user' ? darkStyles.userMessage : darkStyles.gptMessage) : ''\n              }`}\n            >\n              {message.text}\n            </div>\n          </div>\n        ))}\n      </div>\n      <form\n        className={`${styles.inputForm} ${darkMode ? darkStyles.inputForm : ''}`}\n        onSubmit={handleSubmit}\n      >\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message here...\"\n          style={darkMode ? { backgroundColor: darkStyles.inputForm.inputBg, color: darkStyles.inputForm.input } : {}}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}