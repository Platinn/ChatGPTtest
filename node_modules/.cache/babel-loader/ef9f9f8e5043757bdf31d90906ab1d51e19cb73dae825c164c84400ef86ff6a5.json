{"ast":null,"code":"var _jsxFileName = \"/Users/plbiojout/Documents/code/naiad-gpt/chatgpttest2.1/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { sendMessage, sendMessageWithContext } from './ChatGPTAPI';\nimport TokenInput from './TokenInput';\nimport styles from './Chat.module2.css';\n\n// Get the token from session storage or prompt the user to enter it\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet userToken = sessionStorage.getItem(\"userToken\");\nif (!userToken) {\n  userToken = prompt(\"Please enter your OpenAI token\");\n  if (userToken) {\n    sessionStorage.setItem(\"userToken\", userToken);\n  }\n}\nconst App = () => {\n  _s();\n  const [userToken, setUserToken] = useState(sessionStorage.getItem('userToken'));\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [useContext, setUseContext] = useState(true); // useContext is now a state variable\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    //setMessages([...messages, { role: 'user', content: input }]);\n    //setInput('');\n\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    if (useContext) {\n      const response = await sendMessageWithContext(updatedMessages, userToken);\n      setMessages([...updatedMessages, {\n        role: 'assistant',\n        content: response\n      }]);\n    } else {\n      //no memory of previous chats\n      const response = await sendMessage(input, userToken);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: response\n      }]);\n    }\n  };\n\n  //if the person isn't logged in with it's userToken\n  if (!userToken) {\n    return /*#__PURE__*/_jsxDEV(TokenInput, {\n      setUserToken: setUserToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.role === 'user' ? styles.userMessage : styles.gptMessage,\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.inputForm,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ATRP7rtHcnDRxXNyUa8vZL1uO8c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","sendMessage","sendMessageWithContext","TokenInput","styles","jsxDEV","_jsxDEV","userToken","sessionStorage","getItem","prompt","setItem","App","_s","setUserToken","messages","setMessages","input","setInput","useContext","setUseContext","handleSubmit","e","preventDefault","trim","newMessage","role","content","updatedMessages","response","prevMessages","fileName","_jsxFileName","lineNumber","columnNumber","className","chatContainer","children","chatWindow","map","message","index","messageContainer","userMessage","gptMessage","inputForm","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/plbiojout/Documents/code/naiad-gpt/chatgpttest2.1/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { sendMessage, sendMessageWithContext } from './ChatGPTAPI';\nimport TokenInput from './TokenInput';\nimport styles from './Chat.module2.css';\n\n// Get the token from session storage or prompt the user to enter it\nlet userToken = sessionStorage.getItem(\"userToken\");\nif (!userToken) {\n  userToken = prompt(\"Please enter your OpenAI token\");\n  if (userToken) {\n    sessionStorage.setItem(\"userToken\", userToken);\n  }\n}\n\nconst App = () => {\n  const [userToken, setUserToken] = useState(sessionStorage.getItem('userToken'));\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [useContext, setUseContext] = useState(true); // useContext is now a state variable\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    //setMessages([...messages, { role: 'user', content: input }]);\n    //setInput('');\n\n    const newMessage = { role: 'user', content: input };\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput('');\n\n    if (useContext) {\n\n      const response = await sendMessageWithContext(updatedMessages, userToken);\n      setMessages([...updatedMessages, { role: 'assistant', content: response }]);\n\n    } else {\n      //no memory of previous chats\n      const response = await sendMessage(input, userToken);\n      setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: response }]);\n    }\n  };\n\n  //if the person isn't logged in with it's userToken\n  if (!userToken) {\n    return <TokenInput setUserToken={setUserToken} />;\n  }\n\n  return (\n    <div className={styles.chatContainer}>\n      <div className={styles.chatWindow}>\n        {messages.map((message, index) => (\n          <div key={index} className={styles.messageContainer}>\n            <div className={message.role === 'user' ? styles.userMessage : styles.gptMessage}>\n              {message.content}\n            </div>\n          </div>\n        ))}\n      </div>\n      <form className={styles.inputForm} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message here...\"\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}